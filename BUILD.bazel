load("@gazelle//:def.bzl", "gazelle")
load("@rules_go//go:def.bzl", "go_binary", "go_library", "go_test", "nogo")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load", "oci_push")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

# gazelle:prefix github.com/stefanpenner/lcc-live
# gazelle:exclude tmp
# gazelle:exclude .git
gazelle(name = "gazelle")

# Test that BUILD files are up to date
gazelle(
    name = "gazelle_check",
    command = "fix",
    mode = "diff",
)

nogo(
    name = "nogo_linter",
    config = "nogo_config.json",
    visibility = ["//visibility:public"],
)

go_library(
    name = "lcc-live_lib",
    srcs = ["main.go"],
    embedsrcs = [
        "data.json",
        "static/favicon.png",
        "static/oops.png",
        "static/script.js",
        "static/style.css",
        "templates/canyon.html.tmpl",
    ],
    importpath = "github.com/stefanpenner/lcc-live",
    visibility = ["//visibility:private"],
    deps = [
        "//fs",
        "//server",
        "//store",
        "//style",
    ],
)

go_binary(
    name = "lcc-live",
    embed = [":lcc-live_lib"],
    visibility = ["//visibility:public"],
    x_defs = {
        "github.com/stefanpenner/lcc-live/server.Version": "{STABLE_GIT_COMMIT}",
        "github.com/stefanpenner/lcc-live/server.BuildTime": "{BUILD_TIMESTAMP}",
    },
)

go_test(
    name = "lcc-live_test",
    srcs = ["main_test.go"],
    embed = [":lcc-live_lib"],
    deps = [
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
    ],
)

# Package the binary into a tar layer
pkg_tar(
    name = "lcc-live_layer",
    srcs = [":lcc-live"],
    package_dir = "/usr/local/bin",
    tags = ["manual"],
)

# Package the purge-cache script
pkg_tar(
    name = "scripts_layer",
    srcs = ["purge-cache.sh"],
    mode = "0755",
    package_dir = "/usr/local/bin",
    tags = ["manual"],
)

# Build OCI image
oci_image(
    name = "image",
    base = "@alpine",
    entrypoint = ["/usr/local/bin/lcc-live"],
    env = {
        "PORT": "3000",
    },
    exposed_ports = ["3000/tcp"],
    tags = ["manual"],
    tars = [
        ":lcc-live_layer",
        ":scripts_layer",
    ],
    # Security: Run as unprivileged user
    user = "nobody",
)

# Load into local Docker daemon
oci_load(
    name = "image_load",
    image = ":image",
    repo_tags = ["lcc.live:latest"],
    tags = ["manual"],
)

# Push to registry (for Fly.io deployment)
oci_push(
    name = "image_push",
    image = ":image",
    repository = "registry.fly.io/lcc-live-dark-paper-70",
    tags = ["manual"],
)

# Deployment script
sh_binary(
    name = "deploy",
    srcs = ["scripts/deploy.sh"],
    args = [
        "$(location :image_load)",
    ],
    data = [
        "fly.toml",
        ":image_load",
    ],
    tags = ["manual"],
)
